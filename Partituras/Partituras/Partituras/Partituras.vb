'Generated by the GOLD Parser Builder

Option Explicit On
Option Strict Off

Imports System.IO
Imports System.Windows.Forms


Module MyParser
    Private Parser As New GOLD.Parser

    Private Enum SymbolIndex
        [Eof] = 0                                 ' (EOF)
        [Error] = 1                               ' (Error)
        [Whitespace] = 2                          ' Whitespace
        [Lparen] = 3                              ' '('
        [Rparen] = 4                              ' ')'
        [Comma] = 5                               ' ','
        [Semi] = 6                                ' ';'
        [Compas] = 7                              ' compas
        [Duracion] = 8                            ' duracion
        [Nota] = 9                                ' nota
        [Note] = 10                               ' note
        [Num] = 11                                ' num
        [Reproducir] = 12                         ' reproducir
        [Silencio] = 13                           ' silencio
        [Simbolo] = 14                            ' simbolo
        [Tempo] = 15                              ' tempo
        [Bpm] = 16                                ' <BPM>
        [Compas2] = 17                            ' <Compas>
        [Duration] = 18                           ' <Duration>
        [Note2] = 19                              ' <Note>
        [Program] = 20                            ' <Program>
        [Silencio2] = 21                          ' <Silencio>
        [Statement] = 22                          ' <Statement>
    End Enum

    Private Enum ProductionIndex
        [Program] = 0                             ' <Program> ::= <Statement> <Program>
        [Program2] = 1                            ' <Program> ::= <Statement>
        [Statement_Nota_Lparen_Comma_Rparen_Semi] = 2 ' <Statement> ::= nota '(' <Note> ',' <Duration> ')' ';'
        [Statement_Simbolo_Lparen_Rparen_Semi] = 3 ' <Statement> ::= simbolo '(' <Compas> ')' ';'
        [Statement_Simbolo_Lparen_Comma_Rparen_Semi] = 4 ' <Statement> ::= simbolo '(' <Silencio> ',' <Duration> ')' ';'
        [Statement_Tempo_Lparen_Rparen_Semi] = 5  ' <Statement> ::= tempo '(' <BPM> ')' ';'
        [Statement_Reproducir_Semi] = 6           ' <Statement> ::= reproducir ';'
        [Note_Note] = 7                           ' <Note> ::= note
        [Duration_Duracion] = 8                   ' <Duration> ::= duracion
        [Compas_Compas] = 9                       ' <Compas> ::= compas
        [Silencio_Silencio] = 10                  ' <Silencio> ::= silencio
        [Bpm_Num] = 11                            ' <BPM> ::= num
    End Enum

    Public Program As Object     'You might derive a specific object

    Public Sub Setup()
        'This procedure can be called to load the parse tables. The class can
        'read tables using a BinaryReader.

        Parser.LoadTables(Path.Combine(Application.StartupPath, "Partituras.egt"))
    End Sub
    
    Public Function Parse(ByVal Reader As TextReader) As Boolean
        'This procedure starts the GOLD Parser Engine and handles each of the
        'messages it returns. Each time a reduction is made, you can create new
        'custom object and reassign the .CurrentReduction property. Otherwise, 
        'the system will use the Reduction object that was returned.
        '
        'The resulting tree will be a pure representation of the language 
        'and will be ready to implement.

        Dim Response As GOLD.ParseMessage
        Dim Done as Boolean                  'Controls when we leave the loop
        Dim Accepted As Boolean = False      'Was the parse successful?

        Accepted = False    'Unless the program is accepted by the parser

        Parser.Open(Reader)
        Parser.TrimReductions = False  'Please read about this feature before enabling  

        Done = False
        Do Until Done
            Response = Parser.Parse()

            Select Case Response              
                Case GOLD.ParseMessage.LexicalError
                    'Cannot recognize token
                    Done = True

                Case GOLD.ParseMessage.SyntaxError
                    'Expecting a different token
                    Done = True

                Case GOLD.ParseMessage.Reduction
                    'Create a customized object to store the reduction
                    '.CurrentReduction = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.Accept
                    'Accepted!
                    'Program = Parser.CurrentReduction  'The root node!                 
                    Done = True
                    Accepted = True

                Case GOLD.ParseMessage.TokenRead
                    'You don't have to do anything here.

                Case GOLD.ParseMessage.InternalError
                    'INTERNAL ERROR! Something is horribly wrong.
                    Done = True

                Case GOLD.ParseMessage.NotLoadedError
                    'This error occurs if the CGT was not loaded.                   
                    Done = True

                Case GOLD.ParseMessage.GroupError 
                    'COMMENT ERROR! Unexpected end of file
                    Done = True
            End Select
        Loop

        Return Accepted
    End Function

    Private Function CreateNewObject(Reduction as GOLD.Reduction) As Object
        Dim Result As Object = Nothing

        With Reduction
            Select Case .Parent.TableIndex                        
                Case ProductionIndex.Program                 
                    ' <Program> ::= <Statement> <Program> 

                Case ProductionIndex.Program2                 
                    ' <Program> ::= <Statement> 

                Case ProductionIndex.Statement_Nota_Lparen_Comma_Rparen_Semi                 
                    ' <Statement> ::= nota '(' <Note> ',' <Duration> ')' ';' 

                Case ProductionIndex.Statement_Simbolo_Lparen_Rparen_Semi                 
                    ' <Statement> ::= simbolo '(' <Compas> ')' ';' 

                Case ProductionIndex.Statement_Simbolo_Lparen_Comma_Rparen_Semi                 
                    ' <Statement> ::= simbolo '(' <Silencio> ',' <Duration> ')' ';' 

                Case ProductionIndex.Statement_Tempo_Lparen_Rparen_Semi                 
                    ' <Statement> ::= tempo '(' <BPM> ')' ';' 

                Case ProductionIndex.Statement_Reproducir_Semi                 
                    ' <Statement> ::= reproducir ';' 

                Case ProductionIndex.Note_Note                 
                    ' <Note> ::= note 

                Case ProductionIndex.Duration_Duracion                 
                    ' <Duration> ::= duracion 

                Case ProductionIndex.Compas_Compas                 
                    ' <Compas> ::= compas 

                Case ProductionIndex.Silencio_Silencio                 
                    ' <Silencio> ::= silencio 

                Case ProductionIndex.Bpm_Num                 
                    ' <BPM> ::= num 

            End Select
        End With     

        Return Result
    End Function
End Module
